//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  homepage: Homepage;
  homepageConnection: HomepageConnection;
  post: Post;
  postConnection: PostConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomepageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomepageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomepageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};

export type DocumentFilter = {
  homepage?: InputMaybe<HomepageFilter>;
  post?: InputMaybe<PostFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Homepage | Post | Folder;

export type HomepageHero = {
  __typename?: 'HomepageHero';
  name: Scalars['String']['output'];
  surname: Scalars['String']['output'];
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  ctaPrimary: Scalars['String']['output'];
  ctaSecondary: Scalars['String']['output'];
  heroIcon?: Maybe<Scalars['String']['output']>;
};

export type HomepageChiSonoFeatures = {
  __typename?: 'HomepageChiSonoFeatures';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
};

export type HomepageChiSono = {
  __typename?: 'HomepageChiSono';
  title: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  image?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<HomepageChiSonoFeatures>>>;
};

export type HomepageServiziServices = {
  __typename?: 'HomepageServiziServices';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon: Scalars['String']['output'];
  features?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type HomepageServizi = {
  __typename?: 'HomepageServizi';
  title: Scalars['String']['output'];
  subtitle?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['JSON']['output']>;
  services?: Maybe<Array<Maybe<HomepageServiziServices>>>;
};

export type HomepageContattiZonesList = {
  __typename?: 'HomepageContattiZonesList';
  name: Scalars['String']['output'];
};

export type HomepageContatti = {
  __typename?: 'HomepageContatti';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  address: Scalars['String']['output'];
  phone: Scalars['String']['output'];
  email: Scalars['String']['output'];
  workingHours: Scalars['String']['output'];
  mapUrl: Scalars['String']['output'];
  zonesTitle: Scalars['String']['output'];
  zonesDescription: Scalars['String']['output'];
  zonesList?: Maybe<Array<Maybe<HomepageContattiZonesList>>>;
  appointmentTitle: Scalars['String']['output'];
  appointmentDescription: Scalars['String']['output'];
  callButtonText: Scalars['String']['output'];
  emailButtonText: Scalars['String']['output'];
};

export type HomepageFooter = {
  __typename?: 'HomepageFooter';
  name: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  copyright: Scalars['String']['output'];
};

export type Homepage = Node & Document & {
  __typename?: 'Homepage';
  hero?: Maybe<HomepageHero>;
  chiSono?: Maybe<HomepageChiSono>;
  servizi?: Maybe<HomepageServizi>;
  contatti?: Maybe<HomepageContatti>;
  footer?: Maybe<HomepageFooter>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HomepageHeroFilter = {
  name?: InputMaybe<StringFilter>;
  surname?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  ctaPrimary?: InputMaybe<StringFilter>;
  ctaSecondary?: InputMaybe<StringFilter>;
  heroIcon?: InputMaybe<ImageFilter>;
};

export type HomepageChiSonoFeaturesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type HomepageChiSonoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  image?: InputMaybe<ImageFilter>;
  features?: InputMaybe<HomepageChiSonoFeaturesFilter>;
};

export type HomepageServiziServicesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  features?: InputMaybe<StringFilter>;
};

export type HomepageServiziFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  services?: InputMaybe<HomepageServiziServicesFilter>;
};

export type HomepageContattiZonesListFilter = {
  name?: InputMaybe<StringFilter>;
};

export type HomepageContattiFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  workingHours?: InputMaybe<StringFilter>;
  mapUrl?: InputMaybe<StringFilter>;
  zonesTitle?: InputMaybe<StringFilter>;
  zonesDescription?: InputMaybe<StringFilter>;
  zonesList?: InputMaybe<HomepageContattiZonesListFilter>;
  appointmentTitle?: InputMaybe<StringFilter>;
  appointmentDescription?: InputMaybe<StringFilter>;
  callButtonText?: InputMaybe<StringFilter>;
  emailButtonText?: InputMaybe<StringFilter>;
};

export type HomepageFooterFilter = {
  name?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  copyright?: InputMaybe<StringFilter>;
};

export type HomepageFilter = {
  hero?: InputMaybe<HomepageHeroFilter>;
  chiSono?: InputMaybe<HomepageChiSonoFilter>;
  servizi?: InputMaybe<HomepageServiziFilter>;
  contatti?: InputMaybe<HomepageContattiFilter>;
  footer?: InputMaybe<HomepageFooterFilter>;
};

export type HomepageConnectionEdges = {
  __typename?: 'HomepageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Homepage>;
};

export type HomepageConnection = Connection & {
  __typename?: 'HomepageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HomepageConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  date: Scalars['String']['output'];
  excerpt?: Maybe<Scalars['String']['output']>;
  coverImage?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  excerpt?: InputMaybe<StringFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateHomepage: Homepage;
  createHomepage: Homepage;
  updatePost: Post;
  createPost: Post;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateHomepageArgs = {
  relativePath: Scalars['String']['input'];
  params: HomepageMutation;
};


export type MutationCreateHomepageArgs = {
  relativePath: Scalars['String']['input'];
  params: HomepageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};

export type DocumentUpdateMutation = {
  homepage?: InputMaybe<HomepageMutation>;
  post?: InputMaybe<PostMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  homepage?: InputMaybe<HomepageMutation>;
  post?: InputMaybe<PostMutation>;
};

export type HomepageHeroMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  surname?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  ctaPrimary?: InputMaybe<Scalars['String']['input']>;
  ctaSecondary?: InputMaybe<Scalars['String']['input']>;
  heroIcon?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageChiSonoFeaturesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageChiSonoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<HomepageChiSonoFeaturesMutation>>>;
};

export type HomepageServiziServicesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HomepageServiziMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  services?: InputMaybe<Array<InputMaybe<HomepageServiziServicesMutation>>>;
};

export type HomepageContattiZonesListMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageContattiMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  workingHours?: InputMaybe<Scalars['String']['input']>;
  mapUrl?: InputMaybe<Scalars['String']['input']>;
  zonesTitle?: InputMaybe<Scalars['String']['input']>;
  zonesDescription?: InputMaybe<Scalars['String']['input']>;
  zonesList?: InputMaybe<Array<InputMaybe<HomepageContattiZonesListMutation>>>;
  appointmentTitle?: InputMaybe<Scalars['String']['input']>;
  appointmentDescription?: InputMaybe<Scalars['String']['input']>;
  callButtonText?: InputMaybe<Scalars['String']['input']>;
  emailButtonText?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageFooterMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  copyright?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageMutation = {
  hero?: InputMaybe<HomepageHeroMutation>;
  chiSono?: InputMaybe<HomepageChiSonoMutation>;
  servizi?: InputMaybe<HomepageServiziMutation>;
  contatti?: InputMaybe<HomepageContattiMutation>;
  footer?: InputMaybe<HomepageFooterMutation>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  date?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type HomepagePartsFragment = { __typename: 'Homepage', hero?: { __typename: 'HomepageHero', name: string, surname: string, title: string, subtitle: string, description: any, ctaPrimary: string, ctaSecondary: string, heroIcon?: string | null } | null, chiSono?: { __typename: 'HomepageChiSono', title: string, description: any, image?: string | null, features?: Array<{ __typename: 'HomepageChiSonoFeatures', title: string, description: string, icon?: string | null } | null> | null } | null, servizi?: { __typename: 'HomepageServizi', title: string, subtitle?: string | null, description?: any | null, services?: Array<{ __typename: 'HomepageServiziServices', title: string, description: string, icon: string, features?: Array<string | null> | null } | null> | null } | null, contatti?: { __typename: 'HomepageContatti', title: string, description: string, address: string, phone: string, email: string, workingHours: string, mapUrl: string, zonesTitle: string, zonesDescription: string, appointmentTitle: string, appointmentDescription: string, callButtonText: string, emailButtonText: string, zonesList?: Array<{ __typename: 'HomepageContattiZonesList', name: string } | null> | null } | null, footer?: { __typename: 'HomepageFooter', name: string, title: string, description: any, copyright: string } | null };

export type PostPartsFragment = { __typename: 'Post', title: string, tags?: Array<string | null> | null, date: string, excerpt?: string | null, coverImage?: string | null, body?: any | null };

export type HomepageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HomepageQuery = { __typename?: 'Query', homepage: { __typename: 'Homepage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'HomepageHero', name: string, surname: string, title: string, subtitle: string, description: any, ctaPrimary: string, ctaSecondary: string, heroIcon?: string | null } | null, chiSono?: { __typename: 'HomepageChiSono', title: string, description: any, image?: string | null, features?: Array<{ __typename: 'HomepageChiSonoFeatures', title: string, description: string, icon?: string | null } | null> | null } | null, servizi?: { __typename: 'HomepageServizi', title: string, subtitle?: string | null, description?: any | null, services?: Array<{ __typename: 'HomepageServiziServices', title: string, description: string, icon: string, features?: Array<string | null> | null } | null> | null } | null, contatti?: { __typename: 'HomepageContatti', title: string, description: string, address: string, phone: string, email: string, workingHours: string, mapUrl: string, zonesTitle: string, zonesDescription: string, appointmentTitle: string, appointmentDescription: string, callButtonText: string, emailButtonText: string, zonesList?: Array<{ __typename: 'HomepageContattiZonesList', name: string } | null> | null } | null, footer?: { __typename: 'HomepageFooter', name: string, title: string, description: any, copyright: string } | null } };

export type HomepageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomepageFilter>;
}>;


export type HomepageConnectionQuery = { __typename?: 'Query', homepageConnection: { __typename?: 'HomepageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomepageConnectionEdges', cursor: string, node?: { __typename: 'Homepage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'HomepageHero', name: string, surname: string, title: string, subtitle: string, description: any, ctaPrimary: string, ctaSecondary: string, heroIcon?: string | null } | null, chiSono?: { __typename: 'HomepageChiSono', title: string, description: any, image?: string | null, features?: Array<{ __typename: 'HomepageChiSonoFeatures', title: string, description: string, icon?: string | null } | null> | null } | null, servizi?: { __typename: 'HomepageServizi', title: string, subtitle?: string | null, description?: any | null, services?: Array<{ __typename: 'HomepageServiziServices', title: string, description: string, icon: string, features?: Array<string | null> | null } | null> | null } | null, contatti?: { __typename: 'HomepageContatti', title: string, description: string, address: string, phone: string, email: string, workingHours: string, mapUrl: string, zonesTitle: string, zonesDescription: string, appointmentTitle: string, appointmentDescription: string, callButtonText: string, emailButtonText: string, zonesList?: Array<{ __typename: 'HomepageContattiZonesList', name: string } | null> | null } | null, footer?: { __typename: 'HomepageFooter', name: string, title: string, description: any, copyright: string } | null } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, tags?: Array<string | null> | null, date: string, excerpt?: string | null, coverImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, tags?: Array<string | null> | null, date: string, excerpt?: string | null, coverImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const HomepagePartsFragmentDoc = gql`
    fragment HomepageParts on Homepage {
  __typename
  hero {
    __typename
    name
    surname
    title
    subtitle
    description
    ctaPrimary
    ctaSecondary
    heroIcon
  }
  chiSono {
    __typename
    title
    description
    image
    features {
      __typename
      title
      description
      icon
    }
  }
  servizi {
    __typename
    title
    subtitle
    description
    services {
      __typename
      title
      description
      icon
      features
    }
  }
  contatti {
    __typename
    title
    description
    address
    phone
    email
    workingHours
    mapUrl
    zonesTitle
    zonesDescription
    zonesList {
      __typename
      name
    }
    appointmentTitle
    appointmentDescription
    callButtonText
    emailButtonText
  }
  footer {
    __typename
    name
    title
    description
    copyright
  }
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  tags
  date
  excerpt
  coverImage
  body
}
    `;
export const HomepageDocument = gql`
    query homepage($relativePath: String!) {
  homepage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomepageParts
  }
}
    ${HomepagePartsFragmentDoc}`;
export const HomepageConnectionDocument = gql`
    query homepageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomepageFilter) {
  homepageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomepageParts
      }
    }
  }
}
    ${HomepagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      homepage(variables: HomepageQueryVariables, options?: C): Promise<{data: HomepageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageQueryVariables, query: string}> {
        return requester<{data: HomepageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageQueryVariables, query: string}, HomepageQueryVariables>(HomepageDocument, variables, options);
      },
    homepageConnection(variables?: HomepageConnectionQueryVariables, options?: C): Promise<{data: HomepageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageConnectionQueryVariables, query: string}> {
        return requester<{data: HomepageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageConnectionQueryVariables, query: string}, HomepageConnectionQueryVariables>(HomepageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.6/content/66cb0674-8cab-41ce-bc1a-b96ed6911276/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  