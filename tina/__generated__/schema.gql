# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  homepage(relativePath: String): Homepage!
  homepageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomepageFilter): HomepageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
}

input DocumentFilter {
  homepage: HomepageFilter
  post: PostFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Homepage | Post | Folder

type HomepageHero {
  name: String!
  surname: String!
  title: String!
  subtitle: String!
  description: JSON!
  ctaPrimary: String!
  ctaSecondary: String!
  heroIcon: String
}

type HomepageChiSonoFeatures {
  title: String!
  description: String!
  icon: String
}

type HomepageChiSono {
  title: String!
  description: JSON!
  image: String
  features: [HomepageChiSonoFeatures]
}

type HomepageServiziServices {
  title: String!
  description: String!
  icon: String!
  features: [String]
}

type HomepageServizi {
  title: String!
  subtitle: String
  description: JSON
  services: [HomepageServiziServices]
}

type HomepageContattiZonesList {
  name: String!
}

type HomepageContatti {
  title: String!
  description: String!
  address: String!
  phone: String!
  email: String!
  workingHours: String!
  mapUrl: String!
  zonesTitle: String!
  zonesDescription: String!
  zonesList: [HomepageContattiZonesList]
  appointmentTitle: String!
  appointmentDescription: String!
  callButtonText: String!
  emailButtonText: String!
}

type Homepage implements Node & Document {
  hero: HomepageHero
  chiSono: HomepageChiSono
  servizi: HomepageServizi
  contatti: HomepageContatti
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HomepageHeroFilter {
  name: StringFilter
  surname: StringFilter
  title: StringFilter
  subtitle: StringFilter
  description: RichTextFilter
  ctaPrimary: StringFilter
  ctaSecondary: StringFilter
  heroIcon: ImageFilter
}

input HomepageChiSonoFeaturesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input HomepageChiSonoFilter {
  title: StringFilter
  description: RichTextFilter
  image: ImageFilter
  features: HomepageChiSonoFeaturesFilter
}

input HomepageServiziServicesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
  features: StringFilter
}

input HomepageServiziFilter {
  title: StringFilter
  subtitle: StringFilter
  description: RichTextFilter
  services: HomepageServiziServicesFilter
}

input HomepageContattiZonesListFilter {
  name: StringFilter
}

input HomepageContattiFilter {
  title: StringFilter
  description: StringFilter
  address: StringFilter
  phone: StringFilter
  email: StringFilter
  workingHours: StringFilter
  mapUrl: StringFilter
  zonesTitle: StringFilter
  zonesDescription: StringFilter
  zonesList: HomepageContattiZonesListFilter
  appointmentTitle: StringFilter
  appointmentDescription: StringFilter
  callButtonText: StringFilter
  emailButtonText: StringFilter
}

input HomepageFilter {
  hero: HomepageHeroFilter
  chiSono: HomepageChiSonoFilter
  servizi: HomepageServiziFilter
  contatti: HomepageContattiFilter
}

type HomepageConnectionEdges {
  cursor: String!
  node: Homepage
}

type HomepageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomepageConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  tags: [String]
  date: String!
  excerpt: String
  coverImage: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostFilter {
  title: StringFilter
  tags: StringFilter
  date: DatetimeFilter
  excerpt: StringFilter
  coverImage: ImageFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  createHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentUpdateMutation {
  homepage: HomepageMutation
  post: PostMutation
  relativePath: String
}

input DocumentMutation {
  homepage: HomepageMutation
  post: PostMutation
}

input HomepageHeroMutation {
  name: String
  surname: String
  title: String
  subtitle: String
  description: JSON
  ctaPrimary: String
  ctaSecondary: String
  heroIcon: String
}

input HomepageChiSonoFeaturesMutation {
  title: String
  description: String
  icon: String
}

input HomepageChiSonoMutation {
  title: String
  description: JSON
  image: String
  features: [HomepageChiSonoFeaturesMutation]
}

input HomepageServiziServicesMutation {
  title: String
  description: String
  icon: String
  features: [String]
}

input HomepageServiziMutation {
  title: String
  subtitle: String
  description: JSON
  services: [HomepageServiziServicesMutation]
}

input HomepageContattiZonesListMutation {
  name: String
}

input HomepageContattiMutation {
  title: String
  description: String
  address: String
  phone: String
  email: String
  workingHours: String
  mapUrl: String
  zonesTitle: String
  zonesDescription: String
  zonesList: [HomepageContattiZonesListMutation]
  appointmentTitle: String
  appointmentDescription: String
  callButtonText: String
  emailButtonText: String
}

input HomepageMutation {
  hero: HomepageHeroMutation
  chiSono: HomepageChiSonoMutation
  servizi: HomepageServiziMutation
  contatti: HomepageContattiMutation
}

input PostMutation {
  title: String
  tags: [String]
  date: String
  excerpt: String
  coverImage: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
